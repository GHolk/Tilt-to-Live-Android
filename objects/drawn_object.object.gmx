<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_index != -1 {
    draw_self() }
    
if sprite_index = UI_background_icon_large {
draw_sprite_ext(UI_background_icon_small,image_index,x,y,image_xscale,image_yscale,-image_angle,image_blend,image_alpha) }

if parameter[0] != -1 { //not normal
    if sprite_index = spr_powerup_nuke { //I'm a nuke!
        draw_sprite_ext(spr_powerup_nuke_icon,-1,x,y,1,1,parameter[0],image_blend,1) }
    else if sprite_index = spr_powerup_laser { //I'm a laser!
        draw_sprite_ext(spr_powerup_laser_icon,-1,x,y,1,1,parameter[0],image_blend,1) }
    else {
        //0 = high score, negative if beaten, 1 = best time, negative if beaten, 2 = whether next level is unlocked,
        //3 = xcoord of showCombo, 4 = ycoord of showCombo. 5 = combo value, negative if combo is not complete, 
        //6 = ycoord of combo box
        draw_set_halign(fa_right)
        draw_text(view_wview[0]-20, 742, "Mouseover to Live v" + string(global.version))
        draw_set_halign(fa_left)
        
        draw_sprite(spr_score_text,-1,24+global.roomShift,12)
        draw_text(800+global.roomShift,15,format_number(abs(parameter[0])));
        draw_text(928+global.roomShift,15,format_time(abs(parameter[1])));
        
        if (parameter[2]) {
            draw_sprite(crown_gold,-1,770+global.roomShift,24) }
        else {
            draw_sprite(crown_silver,-1,770+global.roomShift,24) }
            
        if parameter[0] &lt; 0 { draw_set_color(c_yellow) }
        draw_text(100+global.roomShift,15,format_number(control_pause.pointscore))
        draw_set_color(c_white)
        
        if parameter[1] &lt; 0 { draw_set_color(c_yellow) }
        draw_text(480+global.roomShift,15,format_time(control_pause.timescore/60))
        draw_set_color(c_white)
        
        if parameter[6] != -1 {
            draw_sprite(spr_combo_text,-1,428+global.roomShift,parameter[6]-18)
            draw_set_color(make_color_rgb(56,78,23))
            draw_set_font(font1)
            draw_text(518+global.roomShift,parameter[6]-14,"" + string(abs(parameter[5])*6) + " x " + string(abs(parameter[5])))
            draw_set_color(c_white)
            draw_set_font(font0)
        }
        
        if parameter[5] &gt; 0 {
            draw_text(parameter[3], parameter[4], "x"+string(abs(parameter[5]))) }

    }
}
        

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
